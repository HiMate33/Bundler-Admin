import NextAuth from "next-auth"
import GoogleProvider from "next-auth/providers/google"
import { MongoDBAdapter } from "@auth/mongodb-adapter"
import clientPromise from "../../../lib/mongodb" 

const handler = NextAuth({
  adapter: MongoDBAdapter(clientPromise),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  callbacks: {
    async signIn({ user }) {
      const client = await clientPromise
      const db = client.db()
      const allowed = await db.collection("admins").findOne({ email: user.email })
      return !!allowed
    },
    async session({ session, token }) {
      return session
    },
    async redirect({ url, baseUrl }) {
      return baseUrl
    },
  },
  pages: {
    signIn: "/login",
    error: "/auth/error",
    signOut: "/login",
  },
  secret: process.env.NEXTAUTH_SECRET,
})

export { handler as GET, handler as POST }

==>.  here is my  api/auth/[...nextauth]/route.ts 

"use client"

import { SessionProvider } from "next-auth/react"
import { ReactNode } from "react"

export default function AuthProvider({ children }: { children: ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>
}

==>>  auth provider.tsx component 

"use client"
import { useSession } from "next-auth/react"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import { Loader2 } from "lucide-react"

export default function RequireAuth({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession()
  const router = useRouter()

  useEffect(() => {
    if (status === "unauthenticated") {
      router.replace("/login")
    }
  }, [status])

  if (status === "loading") {
    return (
      <div className="flex items-center justify-center h-screen bg-[#0b0b0e] text-white">
        <Loader2 className="h-10 w-10 animate-spin text-[#9945ff]" />
      </div>
    )
  }

  return <>{children}</>
}

==>.  requiredauth .tsx component 

"use client"
import { signIn } from "next-auth/react"
import { useState } from "react"
import { Loader2 } from "lucide-react"

export default function LoginPage() {
  const [loading, setLoading] = useState(false)

  const handleSignIn = async () => {
    setLoading(true)
    await signIn("google", { callbackUrl: "/" })
  }

  return (
    <div className="relative flex flex-col items-center justify-center h-screen bg-[#0b0b0e] overflow-hidden text-white">
      
      <div className="absolute inset-0 -z-10 opacity-5 animate-pulse">
        <img
          src="/solana-icon.png"
          alt="Solana Background"
          className="absolute top-10 left-20 w-48 animate-spin-slow"
        />
        <img
          src="/solana-icon.png"
          alt="Solana Background"
          className="absolute bottom-10 right-20 w-36 animate-bounce-slow"
        />
      </div>

      <div>
        <img src="/botzilla.png" alt="BotZilla Logo" className="w-40 h-40 mb-6" />
      </div>

      <h1 className="text-3xl font-bold mb-4 text-[#9945ff]">Welcome to BotZilla</h1>

      <button
        onClick={handleSignIn}
        disabled={loading}
        className={`flex items-center gap-2 bg-gradient-to-r from-[#9945ff] via-[#19fb9b] to-[#00ffa3] text-black px-6 py-3 rounded-lg font-semibold shadow-md transition duration-300 ${
          loading ? "opacity-60 cursor-not-allowed" : "hover:shadow-lg hover:scale-105 cursor-pointer"
        }`}
      >
        {loading ? (
          <>
            <Loader2 className="animate-spin h-5 w-5" />
            Signing in...
          </>
        ) : (
          "Sign in with Google"
        )}
      </button>
    </div>
  )
}

==.  login page .tsx 

import Main from "./components/landing/main";
import AuthProvider from "./components/AuthProvider"
import RequireAuth from "./components/RequireAuth"

export default function Home() {
  return (
    <div>
     
        <RequireAuth>
          <Main />
        </RequireAuth>
     
    </div>
  );
}

=>  page.tsx 

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import AuthProvider from "./components/AuthProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider>
{children}
        </AuthProvider>
        
      </body>
    </html>
  );
}

==>  layout.tsx 

==>> this is the problem i am facing..  everything works .. except.. 
i was able to add admin to the database..    the main problem now is . 
the  if authorized admin sigin in..  his email it takes him back to login.  
..  instead redirecting to the  /  ...  thats the only problem now.  